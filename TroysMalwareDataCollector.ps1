
#TROYS MALWARE DATA COLLECTOR#
#This procedural script was written to speed up the data collection process for malware investigations#
#Version 0.0.1#

$options = [System.Windows.MessageBoxButton]::YesNo;

$title = “Troys Malware Data Collector”;
$body = “Click Yes to run the script. Data collection time varies based upon the volumes of data to scan. Give the script time to run. Go Grab a coffee!! Proceed?”;

$icon = [System.Windows.MessageBoxImage]::Warning;

$decision = [System.Windows.MessageBox]::Show($body,$title,$options,$icon);

if($decision -eq 'Yes'){
    # Run script
    $directoryExists = Test-Path C:\scriptlog;

    if($directoryExists){
        Write-Host 'ScriptLog directory already exists!';
    }else{
    # make directory containing txt log files
    mkdir 'C:\scriptlog';
    }

    # Contains hashes of unsigned execs for virustotal to scan
    $hashArray = @();


    $ALL_DRIVES = Get-PSDrive | Where-Object{$_.Free -gt 1};

    Write-Host 'Process has started. Please allow the scan to begin. You can find the results of the scan in the C:\scriptlog directory';
    Write-Host 'This scan has a lot to do, so it may take a while. Go grab a Coffee! When it is over you will know!';

    foreach($drive in $ALL_DRIVES){
    cd $drive.Root;
    $executables = Get-ChildItem -Force -ErrorAction SilentlyContinue -Recurse -Include *.exe;
        foreach($exec in $executables){
            $sigChecker = Get-AuthenticodeSignature $exec;
            $execName = $exec.Name;
                if($sigChecker.Status -eq 'Valid'){
                    Write-Host 'Valid Exe is:' $sigChecker.Path;
                    Write-Host 'Status is:' $sigChecker.Status;
                
                    $hash = Get-FileHash $sigChecker.Path -Algorithm MD5;
                    Write-Host 'MD5 Hash is: ' $hash.Hash;
                    $DATE = Get-Date;
                    Add-Content 'C:\scriptlog\signed.txt' $DATE.DateTime;
                    Add-Content 'C:\scriptlog\signed.txt' $hash;
                    Add-Content 'C:\scriptlog\signed.txt' $sigChecker.Status;
                    $runningProcesses = Get-Process;
                    $EXE = '.exe';
                    foreach($process in $runningProcesses){
                        $fullExecutable = $process.ProcessName + $EXE;
                        if($execName -eq $fullExecutable){
                            $msg = $execName + ' is currently a running process';
                            Add-Content 'C:\scriptlog\signed.txt' $msg;
                        }
                    }

                }
            
                elseif($sigChecker.Status -eq 'NotSigned'){
                    Write-Host 'Unsigned Exe is:' $sigChecker.Path;
                    Write-Host 'Status is:' $sigChecker.Status;
                
                    $hash = Get-FileHash $sigChecker.Path -Algorithm MD5;
                    Write-Host 'MD5 Hash is: ' $hash.Hash;
                    $DATE = Get-Date;
                    Add-Content 'C:\scriptlog\unsigned.txt' $DATE.DateTime;
                    Add-Content 'C:\scriptlog\unsigned.txt' $hash;
                    Add-Content 'C:\scriptlog\unsigned.txt' $sigChecker.Status;
                    $runningProcesses = Get-Process;
                    $EXE = '.exe';
                    foreach($process in $runningProcesses){

                  
                       $hashArray += ,$hash.Hash;
                        $fullExecutable = $process.ProcessName + $EXE;
                        if($execName -eq $fullExecutable){
                            # add to hash array
                            $unsignedHash = Get-FileHash $process.Path -Algorithm MD5;
                            # Virus Total Scan on the unsigned process using a REST HTTP call. 
                            $DATE = Get-Date;
                            Add-Content 'C:\scriptlog\VirusTotalResults.txt' $DATE.DateTime;
                            Add-Content 'C:\scriptlog\VirusTotalResults.txt' '===========================================================================================';
                            $Uri = 'https://www.virustotal.com/api/v3/files/'+$unsignedHash.Hash;
                            $Result = Invoke-RestMethod -Uri $Uri -Method Get -Headers @{'X-Apikey' = "#YOUR API KEY HERE#"};
                            # put returned response data into their own variables for formatting purposes
                            $attributes = $Result.data.attributes | Out-String;
                            Add-Content 'C:\scriptlog\VirusTotalResults.txt' $attributes;
                            Add-Content 'C:\scriptlog\VirusTotalResults.txt' '===========================================================================================';
                            $msg = $execName + ' is currently a running process';
                            Add-Content 'C:\scriptlog\unsigned.txt' $msg;
                            # strings analysis
                            $stringResults = strings -n 6 -u  $process.Path;
                            # URL Extractor
                            $success = $stringResults | select-string -AllMatches '(http[s]?|[s]?ftp[s]?)(:\/\/)([^\s,]+)';
                            if($success){
                            # do a URL check
                            $DATE = Get-Date;
                            Add-Content 'C:\scriptlog\URLStrings.txt' $DATE.DateTime;
                            Add-Content 'C:\scriptlog\URLStrings.txt' $process.Name;
                            Add-Content 'C:\scriptlog\URLStrings.txt' '=============================================================================================';
                            Add-Content 'C:\scriptlog\URLStrings.txt' $success;
                            Add-Content 'C:\scriptlog\URLStrings.txt' '=============================================================================================';
                            }else{
                                continue
                            }
                            $DATE = Get-Date;
                            Add-Content 'C:\scriptlog\UnsignedProcStrings.txt' $DATE.DateTime;
                            Add-Content 'C:\scriptlog\UnsignedProcStrings.txt' $process.ProcessName.ToUpper();
                            Add-Content 'C:\scriptlog\UnsignedProcStrings.txt' '=========================================================================================';
                            Add-Content 'C:\scriptlog\UnsignedProcStrings.txt' $stringResults;
                            Add-Content 'C:\scriptlog\UnsignedProcStrings.txt' '=========================================================================================';
                       
                        }
                    }
                }else{
                    continue
                }
        }
    cd ..;
    }
    #HKCU DATA
    $HKCURun = (Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run");
    $HKCURunOnce = (Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce");
    $HKCUCount = Get-Item 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Run';
    $countHKCUNum = $HKCUCount.Property | measure;
    $HKCURunOnceCount = Get-Item 'HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce';
    $countHKCURunOnceNum = $HKCURunOnceCount.Property | measure;
    #HKLM DATA
    $HKLMRun = (Get-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run");
    $HKLMRunOnce = (Get-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce");
    $HKLMCount = Get-Item 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Run';
    $countHKLMNum = $HKLMCount.Property | measure;
    $HKLMRunOnceCount = Get-Item 'HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce';
    $countHKLMRunOnceNum = $HKLMRunOnceCount.Property | measure;
    #HKCU Run CHECK
    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===========================HKCU RUN CHECK==================================';
    $DATE = Get-Date;
    Add-Content 'C:\scriptlog\RegistryFindings.txt' $DATE.DateTime;
    if($countHKCUNum.Count -le 0){
        Add-Content 'C:\scriptlog\RegistryFindings.txt' '0 Properties were found in HKCU Run';
        # Write-Host '0 Properties found in HKCU Run'
    }else{
        $msg = 'Properties Found within HKCU Run: '+$countHKCUNum.Count;
        Add-Content 'C:\scriptlog\RegistryFindings.txt' $msg;
        # Write-Host 'Properties Found:' $countHKCUNum.Count
        $HKCUNames = $HKCUCount.Property;
        Add-Content 'C:\scriptlog\RegistryFindings.txt' $HKCUNames;
 
        foreach($key in $HKCUNames){
            $data = Get-ItemPropertyValue 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Run' $key;
            Add-Content 'C:\scriptlog\RegistryFindings.txt' $data;
    }
    }
    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===================================================================================';

    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===========================HKCU RUN ONCE CHECK==================================';
    $DATE = Get-Date;
    Add-Content 'C:\scriptlog\RegistryFindings.txt' $DATE.DateTime;
    #HKCU RunOnce Check
    if($countHKCURunOnceNum.Count -le 0){
        Add-Content 'C:\scriptlog\RegistryFindings.txt' '0 Properties were found in HKCU RunOnce';
        # Write-Host '0 Properties found in HKCU Run once key'
    }else{
        $msg = 'Properties Found within HKCU Run:'+$countHKCURunOnceNum.Count;
        Add-Content 'C:\scriptlog\RegistryFindings.txt' $msg;
        # Write-Host 'Properties Found:' $countHKCURunOnceNum.Count
        $HKCURunOnceCount = $HKCUCount.Property;
        Add-Content 'C:\scriptlog\RegistryFindings.txt' $HKCURunOnceCount;
        foreach($key in $HKCURunOnce){
           $data = Get-ItemPropertyValue 'HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce' $key;
       
           Add-Content 'C:\scriptlog\RegistryFindings.txt' $data;
             
            }
        
    }

    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===================================================================================';

    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===========================HKLM RUN CHECK==================================';
    $DATE = Get-Date;
    Add-Content 'C:\scriptlog\RegistryFindings.txt' $DATE.DateTime;
    #HKLM Run CHECK
    if($countHKLMNum.Count -le 0){
        Add-Content 'C:\scriptlog\RegistryFindings.txt' '0 Properties found in HKLM Run';
        # Write-Host '0 Properties found in HKLM Run key'
    }else{
        $msg = 'Properties found in HKLM Run: '+$countHKLMNum.Count;
        Add-Content 'C:\scriptlog\RegistryFindings.txt' $msg;
        # Write-Host 'Properties Found:' $countHKLMNum.Count
        $HKLMNames = $HKLMCount.Property;
        Add-Content 'C:\scriptlog\RegistryFindings.txt' $HKLMNames; 
        foreach($key in $HKLMNames){
            $data = Get-ItemPropertyValue 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Run' $key;
            Add-Content 'C:\scriptlog\RegistryFindings.txt' $data;
    }
    }
    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===================================================================================';

    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===========================HKLM RUN ONCE CHECK==================================';
    $DATE = Get-Date;
    Add-Content 'C:\scriptlog\RegistryFindings.txt' $DATE.DateTime;
    #HKLM RunOnce Check
    if($countHKLMRunOnceNum.Count -le 0){
        Add-Content 'C:\scriptlog\RegistryFindings.txt' '0 Properties found in HKLM RunOnce';
        # Write-Host '0 Properties found in HKCU Run once key'
    }else{
        $msg = 'Properties found in HKLM RunOnce: '+$countHKLMRunOnceNum.Count;
        # Write-Host 'Properties Found:' $countHKLMRunOnceNum.Count
        $HKLMRunOnceCount = $HKLMCount.Property;
        Add-Content 'C:\scriptlog\RegistryFindings.txt' $HKLMRunOnceCount;
        foreach($key in $HKLMRunOnce){
            $data = Get-ItemPropertyValue 'HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce' $key;
            Add-Content 'C:\scriptlog\RegistryFindings.txt' $data;
    }
    }

    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===================================================================================';

    Add-Content 'C:\scriptlog\RegistryFindings.txt' '===========================DATA LOGGED FOR REVIEW==================================';

    Write-Host 'Starting event log retrieval';

    #System Errors Event Log
    Add-Content 'C:\scriptlog\eventLogs.txt' '===========================EVENT LOGS==================================';
    $date = Get-Date;
    Add-Content 'C:\scriptlog\eventLogs.txt' $DATE.DateTime;
    Add-Content 'C:\scriptlog\eventLogs.txt' '===========================SYSTEM LOGS==================================';
    $systemLog = Get-EventLog -LogName System | Out-String;
    Add-Content 'C:\scriptlog\eventLogs.txt' $systemLog;
    Add-Content 'C:\scriptlog\eventLogs.txt' '========================================================================';
    Add-Content 'C:\scriptlog\eventLogs.txt' '===========================APPLICATION LOGS=============================';
    $applicationLog = Get-EventLog -LogName Application | Out-String;
    Add-Content 'C:\scriptlog\eventLogs.txt' $applicationLog;
    Add-Content 'C:\scriptlog\eventLogs.txt' '========================================================================';
    Add-Content 'C:\scriptlog\eventLogs.txt' '=============================SECURITY===================================';
    $securityLog = Get-EventLog -LogName Security | Out-String;
    Add-Content 'C:\scriptlog\eventLogs.txt' $securityLog;
    Add-Content 'C:\scriptlog\eventLogs.txt' '========================================================================';



    Write-Host 'Event log retrieval complete';


    Add-Content 'C:\scriptlog\DNScache.txt' '========================================================DNS CACHE===============================================';
    $DATE = Get-Date;
    Add-Content 'C:\scriptlog\DNScache.txt' $DATE.DateTime;
    $dnsClientCache = Get-DnsClientCache;
    $dnsData = $dnsClientCache | Out-String;
    Add-Content 'C:\scriptlog\DNScache.txt' $dnsData;
    Add-Content 'C:\scriptlog\DNScache.txt' '================================================================================================================';

    #Windows Defender Logs#
    $date = Get-Date;

    $deflogs = Get-ChildItem 'C:\ProgramData\Microsoft\Windows Defender\Support' -Recurse -Include *.log;

    Add-Content 'C:\scriptlog\WindowsDefenderLogsandBinary.txt' '=========================================WINDOWS DEFENDER LOGS============================================';

    foreach($log in $deflogs){
        $defenderLog = Get-Content $log | Out-String;
        Add-Content 'C:\scriptlog\WindowsDefenderLogsandBinary.txt' $defenderLog;
    }

    Add-Content 'C:\scriptlog\WindowsDefenderLogsandBinary.txt' '==========================================================================================================';

    # Get all services
    Add-Content 'C:\scriptlog\allservices.txt' '=========================================================ALL SERVICES=======================================================';
    $services = Get-Service | Out-String;
    Add-Content 'C:\scriptlog\allservices.txt' $services;
    Add-Content 'C:\scriptlog\allservices.txt' '============================================================================================================================';

    #Arp Cache Check and Network Routing Table
    $NetworkRoutingTable = netstat -r | Out-String; 
    Add-Content 'C:\scriptlog\ARPtable.txt' '=========================================================ARP CACHE & ROUTING TABLE=======================================================';
    $ARP = arp -a | Out-String;
    Add-Content 'C:\scriptlog\ARPtable.txt' '--------------------------------------------------------Routing Table--------------------------------------------------------------------';
    Add-Content 'C:\scriptlog\ARPtable.txt' $NetworkRoutingTable;
    Add-Content 'C:\scriptlog\ARPtable.txt' '------------------------------------------------------------Arp Cache--------------------------------------------------------------------';
    Add-Content 'C:\scriptlog\ARPtable.txt' $ARP;
    Add-Content 'C:\scriptlog\ARPtable.txt' '=========================================================================================================================================';

    #PORT ACTIVITY CHECK 

    $connections = Get-NetTCPConnection | ? {$_.State -eq "Listen"};

    Add-Content 'C:\scriptlog\portActivity.txt' '==========================================PORT ACTIVITY=========================================';
    foreach($connection in $connections){
    $localAddress = 'Local Address: ' +$connection.LocalAddress;
    $localPort = 'Local Port: ' +$connection.LocalPort;
    $remoteAddress = 'Remote Address: '+$connection.RemoteAddress;
    $remoteport = 'Remote Port: '+$connection.RemotePort;
    $connState = 'Connection State: '+$connection.State;
    $process = Get-Process | Where-Object{$_.Id -eq $connection.OwningProcess};
    $responsibleProcess = 'Process Responsible for port activity: '+$process.ProcessName;
    Add-Content 'C:\scriptlog\portActivity.txt' $localPort;
    Add-Content 'C:\scriptlog\portActivity.txt' $remoteAddress;
    Add-Content 'C:\scriptlog\portActivity.txt' $remoteport;
    Add-Content 'C:\scriptlog\portActivity.txt' $connState;
    Add-Content 'C:\scriptlog\portActivity.txt' $responsibleProcess;
    Add-Content 'C:\scriptlog\portActivity.txt' '----------------------------------------------------------------------------------------------';
    }

    Add-Content 'C:\scriptlog\portActivity.txt' '==============================================================================================';


    # Signed and Unsigned Drivers Check
    $drivers = Get-WindowsDriver -Online -All;
    $signedDrivers = Get-AuthenticodeSignature $drivers.OriginalFileName;

    foreach($signedDriver in $signedDrivers){
   
   
    if($signedDriver.Status -eq 'Valid'){
        $signedDriver = $signedDriver | Out-String;
        Add-Content 'C:\scriptlog\SignedDriversCheck.txt' '============================SIGNED DRIVERS============================';
        Add-Content 'C:\scriptlog\SignedDriversCheck.txt' $signedDriver;
        Add-Content 'C:\scriptlog\SignedDriversCheck.txt' '======================================================================';
    
    }else{
    $signedDriver = $signedDriver | Out-String
        Add-Content 'C:\scriptlog\UnsignedDriversCheck.txt' '============================UNSIGNED DRIVERS============================';
        Add-Content 'C:\scriptlog\UnsignedDriversCheck.txt' $signedDriver;
        Add-Content 'C:\scriptlog\UnsignedDriversCheck.txt' '======================================================================';
         }
    }
    #Alternate Data Streams Check
    Add-Content 'C:\scriptlog\AlternateDataStreamsCheckLog.txt' '======================================================ALTERNATE DATA STREAMS==========================================================';
    $DATE = Get-Date;
    Add-Content 'C:\scriptlog\AlternateDataStreamsCheckLog.txt' $DATE.DateTime;
    foreach($drive in $ALL_DRIVES){
    cd $drive.Root;
    $ADSCheck = Get-ChildItem -ErrorAction SilentlyContinue -Recurse | % { Get-Item $_.FullName -stream * } | where stream -ne ':$Data' | Out-String;
    Add-Content 'C:\scriptlog\AlternateDataStreamsCheckLog.txt' $ADSCheck;
    cd ..;
    }
    Add-Content 'C:\scriptlog\AlternateDataStreamsCheckLog.txt' '======================================================================================================================================';
    $options = [System.Windows.MessageBoxButton]::YesNo;

    $title = “Data Collection Complete”;
    $body = “Do you want to be taken to the directory the logs are stored?”;
    $icon = [System.Windows.MessageBoxImage]::Warning;
    $decision = [System.Windows.MessageBox]::Show($body,$title,$options,$icon);

    if($decision -eq 'Yes'){
        Invoke-Item c:\scriptlog;
}else{
   continue
}
}else{

    exit

}





